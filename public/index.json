[{"content":"For this to make sense, I\u0026rsquo;m assuming that you have accounts with both Cloudflare as your DNS provider and SendGrid as your email provider. If not, hopefully some of this translates or is food for thought.\nThis was honestly a pain in the arse, mostly because of the feedback loops for seeing if DNS has worked is measured in days and there are no good error messages other than \u0026rsquo;not working\u0026rsquo; in SendGrid. This leaves you guessing and trawling the internet for things to try to get it working.\nThe reasons for needing email in my app are the typical scenarios: 1) account creation 2) password resetting 3) communication (features / changes / news).\nThe added benefit is the ability to brand links so the emails will be sent from @london-property-pulse.com. This is small but one of my favourite things to feel real / professional.\nSet up 1. Create a non-Gmail account This is something that SendGrid requires you to do. I chose Outlook, use whatever you like. What this means is that a lot of spammers use throw-away Gmail accounts and cannot be trusted with an email blaster.\n2. Verify the email You know the drill, just follow the steps SendGrid tell you to follow.\n3. Adding the SendGrid DNS records to Cloudflare This is the fun bit where you add a bunch of CNAME and a couple of TXT records, effectively hooking up SendGrid to Cloudflare. Keep in mind, when you\u0026rsquo;re done it takes 1 - 2 days for changes to be registered by DNS servers. When setting these up, make sure to turn off the Cloudflare special-sauce DNS proxying (orange cloud thing). This was half the reason I wasn\u0026rsquo;t seeing the DNS resolve.\nWhy Turn off DNS proxying? There are a number of reasons for this but, in a nutshell, the proxying prevents SSL cert validation on the origin server and reduces email deliverability due to the disruption of DKIM authentication. The second part means that your emails will all end up in spam folders üí©\n4. Turning on email routing in Cloudflare This was a source of frustration and something I didn\u0026rsquo;t turn on until much later. I couldn\u0026rsquo;t understand why the DNS wasn\u0026rsquo;t propagating despite triple checking for typos and processes.\nAfter turning on this setting under the Email tab in the Cloudflare dashboard, you\u0026rsquo;re asked to add several email related MX type DNS records. This is the second part of the magic to get things working. Without it your DNS server won\u0026rsquo;t process email. You need to register an email for this, I used the same email as the one used to send and receive emails in SendGrid.\nTo call it out, the issue was not due to CNAME flattening. Apparently this is an issue for some people and a setting that is not available to modify (read turn-off) for top level domains (e.g. london-property-pulse.com). It also makes no difference if your DNS server can resolve it, which apparently Cloudflare does.\nAdditional context: when setting the CNAME values, SendGrid asks you to add a CNAME host like xxx.london-property-pulse.com, on save Cloudflare shortens it to just xxx in the console, also called CNAME flattening.\nMore on that here: CNAME flattening\n5. Checking DNS is working with email There are 2 ways of doing this: 1) using the SendGrid verify button where the DNS records to configure are listed 2) using a 3rd party tool like DNSChecker.org.\nI checked about once or twice a day to see if the DNS had resolved in SendGrid and DNSChecker, and then thinking of all the possible reasons why it hadn\u0026rsquo;t. Definitely land-of-confusion moments!\nThe old faithful here: DNSChecker.org\nNext steps and recommendations I\u0026rsquo;ve not tested the sending of emails, but I\u0026rsquo;m glad to be out of settings dashboards / click-ops and back into code to get the email sending working.\nI definitely recommend setting up the email DNS before you need it as it does take a while to get it working due to the slowness of propagation. It\u0026rsquo;s also something that you can do in the background while working on other things.\nThe good thing about DNS is that once it\u0026rsquo;s configured it\u0026rsquo;s set-and-forget!\n","permalink":"https://clem-sk.dev/posts/linking-sendgrid-and-cloudflare-dns/","summary":"\u003cp\u003eFor this to make sense, I\u0026rsquo;m assuming that you have accounts with both \u003ccode\u003eCloudflare\u003c/code\u003e as your DNS provider and \u003ccode\u003eSendGrid\u003c/code\u003e as your email provider. If not, hopefully some of this translates or is food for thought.\u003c/p\u003e\n\u003cp\u003eThis was honestly a pain in the arse, mostly because of the feedback loops for seeing if DNS has worked is measured in \u003cem\u003edays\u003c/em\u003e and there are no good error messages other than \u0026rsquo;not working\u0026rsquo; in SendGrid. This leaves you guessing and trawling the internet for things to try to get it working.\u003c/p\u003e","title":"Linking Sendgrid and Cloudflare DNS"},{"content":"Yesterday London Property Pulse went live. Launching is a euphoric and satisfying moment where you feel \u0026lsquo;Hooray, I\u0026rsquo;m on the Internet üéâ\u0026rsquo;!\nHere\u0026rsquo;s to launching early üçª\nThe site is definitely far from ready, with bare-bone BE and FE but this way I can see how my changes affect the site\u0026rsquo;s performance and build in public. It also helps my motivation: now it\u0026rsquo;s real and in the world üåç.\nLearnings Getting familiar with Linux I\u0026rsquo;m trying something new by hosting on a virtual private server (VPS) - aka Linux box in the cloud - and had a few things to learn along the way but got there in about a day. While I\u0026rsquo;m familiar with unix environments, working without the bells and whistles of my comfy and configured environment was a bit of a shock but relatively easy to work.\nExceeding low resources is way to easy I started using the most basic plan my VPS provider offered but quickly found that it was running out of memory as I was trying to build my docker images. In the end I bumped up the spec twice to get the performance necessary to run my setup. As I\u0026rsquo;m going to be using a lot data the additional disk space was welcome but I thought that might come later in the process than it did. It was an eye opener that my setup couldn\u0026rsquo;t run properly on 1GB of memory, however performant.\nResponsibility for being in control \u0026lsquo;Nice I control everything! ..oh, I have to manage what now?!\u0026rsquo;\nPart of launching this site was to learn how to manage the details of hosting a site, saving costs, getting in the weeds of devops and so far ‚úÖ. Though, I have had to configure ports, permissions, miscellaneous configurations and a firewall. I now understand that managed services charge more, but honestly for a little more hassle and significantly smaller bill it\u0026rsquo;s worth it. The flip side is that I now have more freedom about what happens on my server than the likes of Vercel, Railway and Netlify would expose to me.\nDNS This time around it was much easier to hook up my domain to my IP address and register it with the registrar. Last time I struggled with configuration of my domain with Netlify and Cloudflare name servers. Maybe I\u0026rsquo;m getting better, or just following standard practice better ü§∑‚Äç‚ôÇÔ∏è. The harder part of the launch of my site was getting my pipeline to work correctly.\nDocker and pipeline secrets + automating builds As good practice I have my pipeline build and push my code to my container registry and then use the new image to deploy to my VPS. However, I found working with GitHub and Docker a bit of a faff. I worked it out in the end but it took about a million runs of the pipeline and debugging the statements before getting a clean run and deploying to the VPS. Part of the issue was the lack of power of the VPS making it impossible to run the code. I had to restart the VPS several times when it would even refuse SSH connections.\nArchitecture I watched a great talk from Amazon on YT which outlines realistic architectures at different scales and studied the system design primer. They helped guide me to not over-engineer my current approach but also prepare for scale.\nThere are 4 parts to the setup: 1. Docker, 2. Caddy, 3. Go, 4. React, 5.Postgres\nContainerisation with Docker The main benefits of Docker are consistent environments and easy replication. Due to this, it means I can have secure builds that can be deployed and scaled to multiple instances as needed. It would also make it easy to move to anther cloud provider.\nCaddy web server Caddy acts as the front-door to the site and works in a monorepo or micro-services contexts. I set up the web server to act as a reverse proxy, file server and rate-limiter, with capabilities for load-balancing and Caddy made that a breeze.\nGo backend I chose Go mostly because I like it but it\u0026rsquo;s also performant, resource efficient, has great concurrency and can be deployed in Linux, Mac and Windows environments.\nReact frontend React was mostly a fallback and could have been another framework but is fast to get started and has a large ecosystem to leverage. I tried using Templ but found that it was too limiting and slowing me down for trivial things that would be easy to do in a React context. Ultimately, I used React because if Templ was challenging to use and there was very little code, what would it be like when there was complexity and a lot more code? Moreover, Templ\u0026rsquo;s state management story was not for me. In this situation I picked a larger bundle size, JS/TS, speed, and a broader ecosystem over server rendering interactions.\nPostgres database Choosing between Postgres and MongoDB as a starting option, my view is that Postgres is the sensible default. I like the structure of types and querying power of a relational DB. That being said, my application is going to be read heavy and I will be performing a number of queries on the data so a relational DB makes more sense at this point.\nNow the real work starts I felt a need to launch the site, now it is I can start on core feature work that will bring the site to life. üöÄ\n","permalink":"https://clem-sk.dev/posts/launching-a-site/","summary":"\u003cp\u003eYesterday \u003ca href=\"https://london-property-pulse.com\"\u003eLondon Property Pulse\u003c/a\u003e went live. Launching is a euphoric and satisfying moment where you feel \u0026lsquo;Hooray, I\u0026rsquo;m on the Internet üéâ\u0026rsquo;!\u003c/p\u003e\n\u003cp\u003eHere\u0026rsquo;s to launching early üçª\u003c/p\u003e\n\u003cp\u003eThe site is definitely far from ready, with bare-bone BE and FE but this way I can see how my changes affect the site\u0026rsquo;s performance and build in public. It also helps my motivation: now it\u0026rsquo;s real and in the world üåç.\u003c/p\u003e\n\u003ch2 id=\"learnings\"\u003eLearnings\u003c/h2\u003e\n\u003ch3 id=\"getting-familiar-with-linux\"\u003eGetting familiar with Linux\u003c/h3\u003e\n\u003cp\u003eI\u0026rsquo;m trying something new by hosting on a virtual private server (VPS) - aka Linux box in the cloud - and had a few things to learn along the way but got there in about a day. While I\u0026rsquo;m familiar with unix environments, working without the bells and whistles of my comfy and configured environment was a bit of a shock but relatively easy to work.\u003c/p\u003e","title":"Launching a Site"},{"content":"Reading a couple of books on launching products made me think about boldness.\nLearnt or innate, sometimes the difference between starting, permission, adventure, change and possibility is boldness.\nSome wonder, think, turn over, want to have others make decisions for them or are paralysed by in action to make a decision.\nI believe the main factor of change is boldness. It leads you to launch yourself in a direction that is only partly known, where the path is lit by a torch beam.\nBig or small, rationally or emotionally boldness is a force to be reckoned with, makes ripples and reshapes the world.\nAs they say, fortune favours the bold.\n","permalink":"https://clem-sk.dev/posts/boldness/","summary":"\u003cp\u003eReading a couple of books on launching products made me think about boldness.\u003c/p\u003e\n\u003cp\u003eLearnt or innate, sometimes the difference between starting, permission, adventure, change and possibility is boldness.\u003c/p\u003e\n\u003cp\u003eSome wonder, think, turn over, want to have others make decisions for them or are paralysed by in action to make a decision.\u003c/p\u003e\n\u003cp\u003eI believe the main factor of change is boldness. It leads you to launch yourself in a direction that is only partly known, where the path is lit by a torch beam.\u003c/p\u003e","title":"Boldness"},{"content":"Seems like on the socials people go over the top with \u0026rsquo;the BEST way to be productive is\u0026hellip;\u0026quot;.\nIn large groups, more complex systems arise depending on a project\u0026rsquo;s needs. However, working alone frees me up to get things very lean.\nThe reality is that 6 things are needed to ship a project:\nTodo app (Todoist): Kanban board with project tasks + notes Calendar (Apple Calendar) Notes app (Obsidian / Apple Notes - previously used Evernote and Notion): Thoughts + resources + diagrams + documentation Email client (Apple Mail / Gmail web) Code editor + terminal (VS Code) Browser (Edge \u0026hellip;on Mac!) Tools come and go, I prefer to use a system like Getting Things Done (GTD) to stay organised and Shape-up as a development framework.\nThe key aspects for me are:\nThe ability to access and update my system wherever I am Robust and stable apps that can be used on mobile, desktop and web Handoff/syncing between devices Integration of Email client calendar with my desktop and phone calendar Todo app with all calendars This setup enables me to be the most effective, capture inspiration, manage my time and ship.\n","permalink":"https://clem-sk.dev/posts/solo-dev-workflow/","summary":"\u003cp\u003eSeems like on the socials people go over the top with \u0026rsquo;the BEST way to be productive is\u0026hellip;\u0026quot;.\u003c/p\u003e\n\u003cp\u003eIn large groups, more complex systems arise depending on a project\u0026rsquo;s needs. However, working alone frees me up to get things very lean.\u003c/p\u003e\n\u003cp\u003eThe reality is that 6 things are needed to ship a project:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTodo app (Todoist): Kanban board with project tasks + notes\u003c/li\u003e\n\u003cli\u003eCalendar (Apple Calendar)\u003c/li\u003e\n\u003cli\u003eNotes app (Obsidian / Apple Notes - previously used Evernote and Notion): Thoughts + resources + diagrams + documentation\u003c/li\u003e\n\u003cli\u003eEmail client (Apple Mail / Gmail web)\u003c/li\u003e\n\u003cli\u003eCode editor + terminal (VS Code)\u003c/li\u003e\n\u003cli\u003eBrowser (Edge \u0026hellip;on Mac!)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTools come and go, I prefer to use a system like \u003ca href=\"https://gettingthingsdone.com/what-is-gtd/\"\u003eGetting Things Done (GTD)\u003c/a\u003e to stay organised and \u003ca href=\"https://basecamp.com/shapeup/0.3-chapter-01\"\u003eShape-up\u003c/a\u003e as a development framework.\u003c/p\u003e","title":"Solo Dev Workflow"},{"content":"Challenge: for a week, don\u0026rsquo;t use a debugger and only use the tools you can use to debug in production.\nWhat did you notice? What workflow changes did you make to get to the same level of productivity as before? Why abandon the debugger? The debugger has it\u0026rsquo;s place, but it can be a crutch to crafting well-thought-out software.\nAs useful a tool as the debugger is, not being able to use a debugger reveals a lot about coding practices and processes.\nNot being able to use a debugger becomes a forcing function, you need to have the right infrastructure and processes in place to catch bugs early:\nGreat error handling and logging Rigorous tests Code reviews Good CI/CD practices Even then, bugs will still slip into production.\nI think main outcomes of out of this exercise are:\nEnhanced tooling and processes for catching bugs Layering human and and automated means adds varying ways of cleaning up code Upgrading production debugging capabilities You don\u0026rsquo;t want to realise that there is poor logging when the prod environment is down Better team understanding of how to debug in production If we were to stop using the debugger today, what tools would you use to improve code quality?\nhttps://lemire.me/blog/2016/06/21/i-do-not-use-a-debugger/ ","permalink":"https://clem-sk.dev/posts/debugging-in-production/","summary":"\u003cp\u003e\u003cstrong\u003eChallenge: for a week, don\u0026rsquo;t use a debugger and only use the tools you can use to debug in production.\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWhat did you notice?\u003c/li\u003e\n\u003cli\u003eWhat workflow changes did you make to get to the same level of productivity as before?\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"why-abandon-the-debugger\"\u003eWhy abandon the debugger?\u003c/h3\u003e\n\u003cp\u003eThe debugger has it\u0026rsquo;s place, but it can be a crutch to crafting well-thought-out software.\u003c/p\u003e\n\u003cp\u003eAs useful a tool as the debugger is, not being able to use a debugger reveals a lot about coding practices and processes.\u003c/p\u003e","title":"Debugging in Production"},{"content":"When developing there are words that are ambiguous when describing a problem.\nOne of my pet peeves is when I hear someone say these cursed words: \u0026lsquo;it was working\u0026rsquo;\nThe problem is that it\u0026rsquo;s fuzzy and does not help identify causes. Logically it\u0026rsquo;s simplistic - yes, in the last PR is was probably working and now with the new PR it\u0026rsquo;s broken. It should be expected that over time enough code changes will cause breakages.\nThe real questions to ask are:\nWhat is the new observed behavior? What triggered it? When was it last seen functioning following the current or former specs? Better questions are:\nWhat do we have in the logs / traces? (if available) When was the last time a services had an outage? I think the best way to not arrive at a situation where we hear ourselves say \u0026lsquo;why is it not working\u0026rsquo; is to cultivate better questions.\nWhile situations and tech stacks change, having a mental toolkit of questions to ask yourself and others when things go wrong can be a shortcut to getting a real solution to the issue.\n","permalink":"https://clem-sk.dev/posts/cursed-dev-words/","summary":"\u003cp\u003eWhen developing there are words that are ambiguous when describing a problem.\u003c/p\u003e\n\u003cp\u003eOne of my pet peeves is when I hear someone say these cursed words: \u003cem\u003e\u0026lsquo;it was working\u0026rsquo;\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThe problem is that it\u0026rsquo;s fuzzy and does not help identify causes. Logically it\u0026rsquo;s simplistic - yes, in the last PR is was probably working and now with the new PR it\u0026rsquo;s broken. It should be expected that over time enough code changes will cause breakages.\u003c/p\u003e","title":"Cursed Dev Words"},{"content":"Styling images in markdown I\u0026rsquo;ll refer to the StackOverflow answer on changing image size in md.\nThe simplest and dependency free method is just to use a CSS selector to style the image.\nThis removes the need for markdown processors that would (with more code) end up in the same place.\nIn Hugo this would mean adding the styles to the assets folder and writing them up this way: img[alt=drawing] { width: 200px; }.\n","permalink":"https://clem-sk.dev/posts/img-size-in-md/","summary":"\u003ch1 id=\"styling-images-in-markdown\"\u003eStyling images in markdown\u003c/h1\u003e\n\u003cp\u003eI\u0026rsquo;ll refer to the StackOverflow answer on \u003ca href=\"https://stackoverflow.com/questions/14675913/changing-image-size-in-markdown\"\u003echanging image size in \u003ccode\u003emd\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe simplest and dependency free method is just to use a CSS selector to style the image.\u003c/p\u003e\n\u003cp\u003eThis removes the need for markdown processors that would (with more code) end up in the same place.\u003c/p\u003e\n\u003cp\u003eIn Hugo this would mean adding the styles to the \u003ccode\u003eassets\u003c/code\u003e folder and writing them up this way: \u003ccode\u003eimg[alt=drawing] { width: 200px; }\u003c/code\u003e.\u003c/p\u003e","title":"Img Size in Md"},{"content":"How this blog is created Making it easy I have previously tried blogging but my biggest obstacle was actually platforms used for blogging. Before knowing how to code, I formerly had a WordPress blog that I barely used. While I would write in my note-taking app, I found the publishing process a pain which led me to write privately as an outlet.\nThe biggest obstacle to keeping a blog is ease of getting stuff from thought to the internet. It should easy: Write in markdown, make the PR and deploy automagically.\nHugo \u0026hellip;Enter Hugo üëè Written in Go (my fav programming language), Hugo makes it silly simple to write, build and deploy a static site.\nI wanted writing and exploring to be the focus and have the information stand for itself so a proven and customisable solution like Hugo was an obvious choice.\nSteps My complete writing and publishing workflow looks like this:\nCreate a new .md file Write the post Save the file and run hugo \u0026amp;\u0026amp; netlify deploy CLI commands to regenerate and view a preview version of the site Once happy, run netlify deploy --prod Bam üí• We‚Äôre live! üöÄ ","permalink":"https://clem-sk.dev/posts/writing-process/","summary":"\u003ch1 id=\"how-this-blog-is-created\"\u003eHow this blog is created\u003c/h1\u003e\n\u003ch3 id=\"making-it-easy\"\u003eMaking it easy\u003c/h3\u003e\n\u003cp\u003eI have previously tried blogging but my biggest obstacle was actually platforms used for blogging. Before knowing how to code, I formerly had a WordPress blog that I barely used. While I would write in my note-taking app, I found the publishing process a pain which led me to write privately as an outlet.\u003c/p\u003e\n\u003cp\u003eThe biggest obstacle to keeping a blog is ease of getting stuff from thought to the internet. It should easy: Write in markdown, make the PR and deploy automagically.\u003c/p\u003e","title":"Writing Process"},{"content":"Main steps Create a layout Adding Mermaid to a content template Maintaining content and theme styles Rendering an example diagram Mermaid diagram This post outlines how to add Mermaid support with Hugo to render the diagram below, as I found the docs a bit lacking.\nWhen pasting, make sure to move the closing code fence to a new line to see the diagram\n```mermaid sequenceDiagram participant Alice participant Bob Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good!``` Creating a layout While Mermaid markdown diagrams aren\u0026rsquo;t supported natively by Hugo, it\u0026rsquo;s easy to add.\nAs the docs mention the first step is to create layouts/_default/_markup/render-codeblock-mermaid.html:\n\u0026lt;pre class=\u0026#34;mermaid\u0026#34;\u0026gt; {{- .Inner | safeHTML }} \u0026lt;/pre\u0026gt; {{ .Page.Store.Set \u0026#34;hasMermaid\u0026#34; true }} Adding Mermaid to a content template The next step is less obvious, while the docs mention to add a code block to a content template it needs a bit of clarification.\nA content template template is what Hugo uses to render types of pages: list, single, summary.\nList: the list view of your posts Summary: the small section in visible before clicking into a post Single: the content of your post We\u0026rsquo;ll focus on the \u0026lsquo;single\u0026rsquo; as this is where the diagrams will be rendered. So under layouts/_default/ you can create a single.html file to then add the code snippet to handle the Mermaid diagrams.\n{{ if .Page.Store.Get \u0026#34;hasMermaid\u0026#34; }} \u0026lt;script type=\u0026#34;module\u0026#34;\u0026gt; import mermaid from \u0026#39;https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.esm.min.mjs\u0026#39;; mermaid.initialize({ startOnLoad: true }); \u0026lt;/script\u0026gt; {{ end }} Maintaining content and theme styles Adding the code above on it\u0026rsquo;s own will make all your \u0026lsquo;single\u0026rsquo; posts 404 as we haven\u0026rsquo;t told Hugo to render any content because omitted a .Content block. The reason for this is because of the render order Hugo has. As such, the default behaviour of the template was overridden and we removed the content and styles.\nHugo uses the following lookup order for content views:\n/layouts/\u0026lt;TYPE\u0026gt;/\u0026lt;VIEW\u0026gt;.html /layouts/_default/\u0026lt;VIEW\u0026gt;.html /themes/\u0026lt;THEME\u0026gt;/layouts/\u0026lt;TYPE\u0026gt;/\u0026lt;VIEW\u0026gt;.html /themes/\u0026lt;THEME\u0026gt;/layouts/_default/\u0026lt;VIEW\u0026gt;.html To update and maintain your changes, go to your theme provider\u0026rsquo;s layout folder copy the layout and then create a new file in your own layouts folder.\nI\u0026rsquo;m using the PaperMod theme and my version would be:\n/themes/PaperMod/layouts/single.html\nand then copy the entire file to:\n/layouts/_default/single.html\nNow, we\u0026rsquo;re able to override the PaperMod theme and subsequent updates won\u0026rsquo;t change our configuration.\n\u0026hellip;But we\u0026rsquo;re still not seeing a Mermaid diagram. To do this, we need to find the .Content block and add the Mermaid script for Hugo to render diagrams.\nIn the \u0026lsquo;single\u0026rsquo; file, find the .Content block and update it to use the Mermaid script from the Hugo docs. My layout Content block looks something like this:\n{{- if .Content }} \u0026lt;div class=\u0026#34;post-content\u0026#34;\u0026gt; {{- if not (.Param \u0026#34;disableAnchoredHeadings\u0026#34;) }} {{- partial \u0026#34;anchored_headings.html\u0026#34; .Content -}} {{- else }}{{ .Content }}{{ end }} \u0026lt;/div\u0026gt; {{ if .Page.Store.Get \u0026#34;hasMermaid\u0026#34; }} \u0026lt;script type=\u0026#34;module\u0026#34;\u0026gt; import mermaid from \u0026#39;https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.esm.min.mjs\u0026#39;; mermaid.initialize({ startOnLoad: true }); \u0026lt;/script\u0026gt; {{ end }} Notice that the script is inside the if .Content block.\nRendering an example diagram If you now run hugo new posts/diagrams.md to create a new post, add the example Mermaid diagram at the top and execute hugo server -D (\u0026lsquo;D\u0026rsquo; to render drafts), it should now render.\nFYI, if you don\u0026rsquo;t have a posts directory, just switch it to wherever you keep your .md files.\nThe diagram:\nsequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts prevail! John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good! Links\nHugo docs: Mermaid diagrams Hugo docs: Content view templates ","permalink":"https://clem-sk.dev/posts/using-mermaid-with-hugo/","summary":"\u003ch3 id=\"main-steps\"\u003eMain steps\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCreate a layout\u003c/li\u003e\n\u003cli\u003eAdding Mermaid to a content template\u003c/li\u003e\n\u003cli\u003eMaintaining content and theme styles\u003c/li\u003e\n\u003cli\u003eRendering an example diagram\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"mermaid-diagram\"\u003eMermaid diagram\u003c/h3\u003e\n\u003cp\u003eThis post outlines how to add Mermaid support with Hugo to render the diagram below, as I found the docs a bit lacking.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhen pasting, make sure to move the closing code fence to a new line to see the diagram\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e```mermaid\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Alice-\u0026gt;\u0026gt;John: Hello John, how are you?\n    loop Healthcheck\n        John-\u0026gt;\u0026gt;John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail!\n    John--\u0026gt;\u0026gt;Alice: Great!\n    John-\u0026gt;\u0026gt;Bob: How about you?\n    Bob--\u0026gt;\u0026gt;John: Jolly good!```\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"creating-a-layout\"\u003eCreating a layout\u003c/h3\u003e\n\u003cp\u003eWhile Mermaid markdown diagrams aren\u0026rsquo;t supported natively by Hugo, it\u0026rsquo;s easy to add.\u003c/p\u003e","title":"Using Mermaid With Hugo"},{"content":"Why keep a personal site? Why not just write on social media?\nPersonal sites offer a valuable space for self-expression and growth, distinct though not a social-media replacement. The process to publish is as simple as I could make it, leaving more room to think in long-form and do.\nI hope for discoveries and personal growth - this is my space to be curious, intentional, and hit publish.\nExternal brain I write to think, remember, explain to myself and others - in other words learn in public.\nHow to read my site You can:\nBrowse the Tags topics Go to Posts to read the latest ones Dive into the Archives to view all posts in a timeline About this site What you read here are thoughts from my learning journey.\nWhen I want to reflect on a topic or write an article, I go through my notes and link them together. Often, I find that the links between notes stimulates further connections and associations. The virtuous cycle continues in this process, driven by my wandering curiosity.\nAbout me I\u0026rsquo;m Clem. I\u0026rsquo;ve worked in different fields but my found that my \u0026lsquo;home\u0026rsquo; in programming.\nIn 2020, wanting automate tasks, I started to learn to code with Learn Python the Hard Way - an excellent intro to the command line and object-oriented programming. I fondly remember creating a mad text adventure game and giggling the whole time. It was then I got hooked.\nFrom there I kept self-teaching Python and enrolled in a coding bootcamp to accelerate my journey to Software Engineering. I made the jump and have been working as a full-time Software Engineer since 2022.\nI\u0026rsquo;m the type of developer that\u0026rsquo;s never done - learning through personal projects, illuminating my known unknowns as well as the topics of the day. Once work over, I open my own laptop and keep going on projects. My posts leave a trail of what\u0026rsquo;s im my head.\nWhy take notes ‚ÄúYour professional success and quality of life depend directly on your ability to manage information effectively.‚Äù\nTiago Forte, Building A Second Brain These days we consume vasts amount of information and way more than I can remember. Managing the input, retention and use of this information is thus our responsibility. Writing my thoughts helps to better understand topics as it forces me to clarify them.\nI publish some of my notes in the hope they can be helpful to others.\nCode If you‚Äôre curious about the writing and publishing process of this blog, see this note\nYou can find the source code of the blog at github.com/ClemSK/csk-dev\n","permalink":"https://clem-sk.dev/aboutme/","summary":"\u003cp\u003eWhy keep a personal site? Why not just write on social media?\u003c/p\u003e\n\u003cp\u003ePersonal sites offer a valuable space for self-expression and growth, distinct though not a social-media replacement. The process to publish is as simple as I could make it, leaving more room to think in long-form and do.\u003c/p\u003e\n\u003cp\u003eI hope for discoveries and personal growth - this is my space to be curious, intentional, and hit publish.\u003c/p\u003e\n\u003ch2 id=\"external-brain\"\u003eExternal brain\u003c/h2\u003e\n\u003cp\u003eI write to think, remember, explain to myself and others - in other words \u003ca href=\"https://www.swyx.io/learn-in-public\"\u003elearn in public\u003c/a\u003e.\u003c/p\u003e","title":"Welcome!"}]